source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
y.fit = dim(sapply(1:sample.iter, function(i) stan.extract$beta_const[i] + x.fit * stan.extract$beta[i,]))
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
y.fit = apply(sapply(1:sample.iter, function(i) stan.extract$beta_const[i] + x.fit * stan.extract$beta[i,]), 1, mean)
fit.df = data.frame(log.x = x.fit, y = y.fit)
ggplot(point.df, aes(log.X, y)) +
geom_point() +
geom_line(data = fit.df) +
theme_bw()
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
y.fit = apply(sapply(1:sample.iter, function(i) stan.extract$beta_const[i] + x.fit %*% stan.extract$beta[i,]), 1, mean)
fit.df = data.frame(log.X = x.fit, y = y.fit)
ggplot(point.df, aes(log.X, y)) +
geom_point() +
geom_line(data = fit.df) +
theme_bw()
ggplot(point.df, aes(log.X, y)) +
geom_point()
head(fit.df)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
i = 1
alpha = stan.extract$alpha[i]
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
gp.df = data.frame(log.X = x.fit, y = f.pred.mean)
ggplot(point.df, aes(log.X, y)) +
geom_point() +
geom_line(data = gp.df) +
theme_bw()
#Plot all the fits together
log.lin.df$Model = "Log-Linear"
translog.df$Model = "Translog"
gp.df$Model = "Non-Parametric"
fit.df = rbind(log.lin.df, translog.df, gp.df)
ggplot(point.df, aes(log.X, y)) +
geom_point() +
geom_line(data = gp.df, aes(color = Model)) +
theme_bw()
fit.df = rbind(log.lin.df, translog.df, gp.df)
ggplot(point.df, aes(log.X, y)) +
geom_point() +
geom_line(data = gp.df, aes(color = Model)) +
theme_bw()
fit.df
ggplot(point.df, aes(log.X, y)) +
geom_point() +
geom_line(data = gp.df, aes(group = Model, color = Model)) +
theme_bw()
ggplot(point.df, aes(log.X, y)) +
geom_point() +
geom_line(data = fi.df, aes(group = Model, color = Model)) +
theme_bw()
ggplot(point.df, aes(log.X, y)) +
geom_point() +
geom_line(data = fit.df, aes(group = Model, color = Model)) +
theme_bw()
ggplot(point.df, aes(log.X, y)) +
geom_point() +
geom_line(data = fit.df, aes(group = Model, color = Model)) +
theme(legend.position = "top") +
theme_bw()
ggplot(point.df, aes(log.X, y)) +
geom_point() +
geom_line(data = fit.df, aes(group = Model, color = Model)) +
theme_bw() +
theme(legend.position = "top")
ggsave("../../figures/data-fit.pdf", width = width, height = height, scale = scale)
ggsave("../../figures/func-forms.pdf", width = width, height = height, scale = scale)
source('~/git/cv/RAND_presentation/R/sf/fit_log_lin.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/fit_translog.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/fit_gp.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/fit_gp.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/fit_gp.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/fit_gp.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/fit_gp.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/fit_gp.R', echo=TRUE)
source('~/git/cv/RAND_presentation/R/sf/make_plots.R', echo=TRUE)
ggplot(point.df, aes(log.X, y)) +
geom_point() +
geom_line(data = fit.df, aes(group = Model, color = Model)) +
xlab("log(X)") +
theme_bw() +
theme(legend.position = "top")
ggsave("../../figures/func-forms.pdf", width = width, height = height, scale = scale)
